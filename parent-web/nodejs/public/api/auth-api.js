"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log_1 = require("../log");
const objects_1 = require("../utils/objects");
const authService = require("../service/auth-service");
const errors_1 = require("../utils/errors");
const auth_filter_1 = require("./auth-filter");
const express = require("express");
const URI = '/auth';
const register = (req, res, next) => {
    const name = req.body.name;
    const email = req.body.email;
    const password = req.body.password;
    log_1.default.info('/register', objects_1.inspect(req.body));
    authService.newUser(name, email, password)
        .then(user => res.json(user))
        .catch(err => errors_1.sendHttpResponse(err, res, next));
};
const me = (req, res, next) => {
    auth_filter_1.decodedToken(req)
        .then(decoded => res.json(decoded))
        .catch(err => errors_1.sendHttpResponse(err, res, next));
};
const logout = (req, res, next) => {
    res.status(200).json('Logout successfuly!');
    return next();
};
const login = (req, res, next) => {
    const tenancyId = req.params.tenancyId;
    const username = req.body.username;
    const password = req.body.password;
    log_1.default.debug(`Login username=${username} password=${password} tenancyId=${tenancyId}`);
    authService.login(username, password, tenancyId)
        .then(user => res.json(user))
        .catch(err => errors_1.sendHttpResponse(err, res, next));
};
class AuthApi {
    routes() {
        return express.Router()
            .post('/register', register)
            .get('/me', me)
            .post('/login', login)
            .post('/login/:tenancyId', login)
            .get('/logout', logout);
    }
}
const api = new AuthApi();
exports.default = server => server.use(URI, api.routes());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBwL2FwaS9hdXRoLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLGdDQUEyQjtBQUMzQiw4Q0FBMEM7QUFDMUMsdURBQXNEO0FBQ3RELDRDQUFrRDtBQUNsRCwrQ0FBNEM7QUFFNUMsbUNBQWtDO0FBRWxDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQTtBQUVuQixNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDaEMsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUE7SUFDMUIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDNUIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUE7SUFFbEMsYUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsaUJBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUMzQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDO1NBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUUseUJBQWdCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ3BELENBQUMsQ0FBQTtBQUVELE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUMxQiwwQkFBWSxDQUFDLEdBQUcsQ0FBQztTQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ25DLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLHlCQUFnQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtBQUNuRCxDQUFDLENBQUE7QUFFRCxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDOUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQTtJQUMzQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7QUFDakIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO0lBQzdCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFBO0lBQ3RDLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFBO0lBQ2xDLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFBO0lBQ2xDLGFBQU0sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLFFBQVEsYUFBYSxRQUFRLGNBQWMsU0FBUyxFQUFFLENBQUMsQ0FBQTtJQUV0RixXQUFXLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDO1NBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMseUJBQWdCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ3ZELENBQUMsQ0FBQTtBQUVEO0lBQ0ksTUFBTTtRQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO2FBQ2xCLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDO2FBQzNCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO2FBQ2QsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7YUFDckIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQzthQUNoQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQy9CLENBQUM7Q0FDSjtBQUVELE1BQU0sR0FBRyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUE7QUFFekIsa0JBQWUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQSJ9